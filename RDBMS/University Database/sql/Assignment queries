1. Total number of students in each department:
SELECT d.department_name, COUNT(s.student_id) AS total_students
FROM Departments d
LEFT JOIN Students s ON d.department_id = s.department_id
GROUP BY d.department_id;

2. Courses taught by a specific professor (e.g., 'Alan Turing'):
SELECT c.course_name
FROM Courses c
JOIN Professors p ON c.professor_id = p.professor_id
WHERE p.first_name = 'Alan' AND p.last_name = 'Turing';

3. Average grade of students in each course:
SELECT c.course_name, AVG(CASE WHEN e.grade = 'A' THEN 4 
                             WHEN e.grade = 'B' THEN 3 
                             WHEN e.grade = 'C' THEN 2 
                             ELSE 0 END) AS avg_grade
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id;

4. Students who have not enrolled in any courses:
SELECT first_name, last_name
FROM Students
WHERE student_id NOT IN (SELECT student_id FROM Enrollments);

5. Number of courses offered by each department:
SELECT d.department_name, COUNT(c.course_id) AS total_courses
FROM Departments d
LEFT JOIN Courses c ON d.department_id = c.department_id
GROUP BY d.department_id;

6. Students who have taken a specific course (e.g., 'Database Systems'):
SELECT s.first_name, s.last_name
FROM Students s
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Database Systems';

7. Most popular course based on enrollment:
SELECT c.course_name, COUNT(e.enrollment_id) AS total_enrollments
FROM Courses c
JOIN Enrollments e ON c.course_id = e.course_id
GROUP BY c.course_id
ORDER BY total_enrollments DESC
LIMIT 1;

8. Average number of credits per student in a department:
SELECT d.department_name, AVG(c.credits) AS avg_credits
FROM Departments d
JOIN Students s ON d.department_id = s.department_id
JOIN Enrollments e ON s.student_id = e.student_id
JOIN Courses c ON e.course_id = c.course_id
GROUP BY d.department_id;

9. Professors teaching in more than one department:
SELECT p.first_name, p.last_name
FROM Professors p
JOIN Courses c ON p.professor_id = c.professor_id
GROUP BY p.professor_id
HAVING COUNT(DISTINCT c.department_id) > 1;

10. Highest and lowest grade in a specific course (e.g., 'Operating Systems'):
SELECT MAX(grade) AS highest_grade, MIN(grade) AS lowest_grade
FROM Enrollments e
JOIN Courses c ON e.course_id = c.course_id
WHERE c.course_name = 'Operating Systems';




